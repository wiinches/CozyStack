input {
  beats {
    codec => "json"
    port => 5044
  }
}

filter {
  if [bro_host] {
    mutate {
      replace => [ "host", "%{bro_host}" ]
    }
  }

  if "bro" in [tags] {
    mutate {
      convert => [ "id.orig_p", "integer" ]
      convert => [ "id.resp_p", "integer" ]
      convert => [ "orig_bytes", "integer" ]
      convert => [ "resp_bytes", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "orig_pkts", "integer" ]
      convert => [ "orig_ip_bytes", "integer" ]
      convert => [ "resp_pkts", "integer" ]
      convert => [ "resp_ip_bytes", "integer" ]
      rename => [ "id.orig_h", "SourceIP" ]
      rename => [ "id.resp_h", "DestinationIP" ]
      rename => [ "id.orig_p", "SourcePort" ]
      rename => [ "id.resp_p", "DestinationPort" ]
      rename => [ "tx_hosts", "SourceIP" ]
      rename => [ "rx_hosts", "DestinationIP" ]
    }
    if [conn_state] and [conn_state] == "S0" {
      mutate { add_field => { "[conn_state_description]" => "Connection attempt seen, no reply" } }
    }

    if [conn_state] and [conn_state] == "S1" {
      mutate { add_field => { "[conn_state_description]" => "Connection established, not terminated (0 byte counts)" } }
    }

    if [conn_state] and [conn_state] == "SF" {
      mutate {add_field => { "[conn_state_description]" => "Normal establish & termination (>0 byte counts)" } }
    }

    if [conn_state] and [conn_state] == "REJ" {
      mutate { add_field => { "[conn_state_description]" => "Connection attempt rejected" } }
    }

    if [conn_state] and [conn_state] == "S2" {
      mutate { add_field => { "[conn_state_description]" => "Established, ORIG attempts close, no reply from RESP." } }
    }

    if [conn_state] and [conn_state] == "S3" {
      mutate { add_field => { "[conn_state_description]" => "Established, RESP attempts close, no reply from ORIG." } }
    }

    if [conn_state] and [conn_state] == "RSTO" {
      mutate { add_field => { "[conn_state_description]" => "Established, ORIG aborted (RST)" } }
    }

    if [conn_state] and [conn_state] == "RSTR" {
      mutate { add_field => { "[conn_state_description]" => "Established, RESP aborted (RST)" } }
    }

    if [conn_state] and [conn_state] == "RSTROS0" {
      mutate { add_field => { "[conn_state_description]" => "ORIG sent SYN then RST; no RESP SYN-ACK" } }
    }

    if [conn_state] and [conn_state] == "RSTRH" {
      mutate { add_field => { "[conn_state_description]" => "RESP sent SYN-ACK then RST; no ORIG SYN" } }
    }

    if [conn_state] and [conn_state] == "SH" {
      mutate { add_field => { "conn_state_description" => "ORIG sent SYN then FIN; no RESP SYN-ACK (“half-open”)" } }
    }

    if [conn_state] and [conn_state] == "SHR" {
      mutate { add_field => { "[conn_state_description]" => "RESP sent SYN-ACK then FIN; no ORIG SYN" } }
    }

    if [conn_state] and [conn_state] == "OTH" {
      mutate { add_field => { "[conn_state_description]" => "No SYN, not closed. Midstream traffic. Partial connection." } }
    }

    mutate { add_tag => "processed" }
  }

  if "suricata" in [tags] {
    if [event_type] and [event_type] == "alert" {
      mutate {
        convert => [ "src_port", "integer" ]
        convert => [ "dest_port", "integer" ]
      }
    }
    else {
      drop { }
    }

    mutate
    {
      rename => [ "src_port", "SourcePort" ]
      rename => [ "dest_port", "DestinationPort" ]
      rename => [ "src_ip", "SourceIP" ]
      rename => [ "dest_ip", "DestinationIP" ]
    }
      if [alert][severity] == 1 {
         mutate { add_field => { "severity" => "High" } }
      }
      if [alert][severity] == 2 {
         mutate { add_field => { "severity" => "Medium" } }
      }
      if [alert][severity] == 3 {
         mutate { add_field => { "severity" => "Low" } }
      }

      mutate { add_tag => "processed" }
   }
}
filter {
  if "processed" in [tags] {
    if [SourceIP] and [DestinationIP] {
      geoip {
        source => "DestinationIP"
        target => "geoip"
        database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      geoip {
        source => "SourceIP"
        target => "geoip"
        database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
          convert => [ "[geoip][coordinates]", "float"]
      }
    }
  }
  mutate { add_tag => "output" }
}

output {
  if "output" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      user => "elastic"
      password => "changeme"
    }
  }
}
