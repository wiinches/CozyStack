input {
  beats {
    codec => "json"
    port => 5044
  }
}

filter {
  if [bro_host] {
    mutate {
      replace => [ "host", "%{bro_host}" ]
    }
  }
}
filter {
  if "bro" in [type] {
    mutate {
      add_tag => [ "BRO" ]
    }
    mutate {
      convert => [ "id.orig_p", "integer" ]
      convert => [ "id.resp_p", "integer" ]
      convert => [ "orig_bytes", "integer" ]
      convert => [ "resp_bytes", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "orig_pkts", "integer" ]
      convert => [ "orig_ip_bytes", "integer" ]
      convert => [ "resp_pkts", "integer" ]
      convert => [ "resp_ip_bytes", "integer" ]
    }
  }
}
filter{
  if "bro" in [type] {
    mutate{
      rename => [ "id.orig_h", "SourceIP" ]
      rename => [ "id.resp_h", "DestinationIP" ]
      rename => [ "id.orig_p", "SourcePort" ]
      rename => [ "id.resp_p", "DestinationPort" ]
      rename => [ "tx_hosts", "SourceIP" ]
      rename => [ "rx_hosts", "DestinationIP" ]
			rename => [ "S0", "Connection attempt seen, no reply" ]
			rename => [ "S1", "Connection established, not terminated (0 byte counts)" ]
			rename => [ "SF", "Normal establish & termination (>0 byte counts)" ]
			rename => [ "REJ", "Connection attempt rejected" ]
			rename => [ "S2", "Established, ORIG attempts close, no reply from RESP." ]
			rename => [ "S3", "Established, RESP attempts close, no reply from ORIG." ]
			rename => [ "RSTO", "Established, ORIG aborted (RST)" ]
			rename => [ "RSTR", "Established, RESP aborted (RST)" ]
			rename => [ "RSTOS", "ORIG sent SYN then RST; no RESP SYN-ACK" ]
			rename => [ "RSTR", "RESP sent SYN-ACK then RST; no ORIG SYN" ]
			rename => [ "SH", "ORIG sent SYN then FIN; no RESP SYN-ACK (“half-open”)" ]
			rename => [ "SHR", "RESP sent SYN-ACK then FIN; no ORIG SYN" ]
			rename => [ "OTH", "No SYN, not closed. Midstream traffic. Partial connection." ]
    }

		}
}
filter {
  geoip {
    source => "DestinationIP"
    target => "geoip"
    database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  geoip {
    source => "SourceIP"
    target => "geoip"
    database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
    add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
    add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  mutate {
      convert => [ "[geoip][coordinates]", "float"]
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "elastic"
    password => "changeme"
  }
}
